loadrt [KINS]KINEMATICS
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD traj_period_nsec=[EMCMOT]TRAJ_PERIOD num_joints=[KINS]JOINTS
loadrt hostmot2

loadrt hm2_spi spidev_path=/dev/spidev0.0
loadrt tmc26x_bspi bspi_chans=hm2_alch_au.0.bspi.0

loadrt pid names=pid.x,pid.y,pid.z,pid.a,pid.b,pid.c

loadusr -W sx1509b

# configure motor currents
setp tmc26x-bspi.0.maxcurrent.0.out 1650
setp tmc26x-bspi.0.maxcurrent.1.out 2800
setp tmc26x-bspi.0.maxcurrent.2.out 1650
setp tmc26x-bspi.0.maxcurrent.3.out 1650
setp tmc26x-bspi.0.maxcurrent.4.out  670
setp tmc26x-bspi.0.maxcurrent.5.out  820

# configure outputs/inputs on gpio expander
setp sx1509b.0.config 0x9ff0 

# invert pwmgen's
setp [HOSTMOT2](BOARD).0.pwmgen.00.out0.invert_output TRUE
setp [HOSTMOT2](BOARD).0.pwmgen.01.out0.invert_output TRUE
setp [HOSTMOT2](BOARD).0.pwmgen.02.out0.invert_output TRUE
setp [HOSTMOT2](BOARD).0.pwmgen.03.out0.invert_output TRUE
setp [HOSTMOT2](BOARD).0.pwmgen.04.out0.invert_output TRUE

setp [HOSTMOT2](BOARD).0.pwmgen.pwm_frequency 200
setp [HOSTMOT2](BOARD).0.pwmgen.pdm_frequency 5000
setp [HOSTMOT2](BOARD).0.watchdog.timeout_ns 500000000

setp genserkins.A-0 0
setp genserkins.A-1 64.2
setp genserkins.A-2 305
setp genserkins.A-3 0
setp genserkins.A-4 0
setp genserkins.A-5 0

setp genserkins.ALPHA-0 0 
setp genserkins.ALPHA-1 -1.570796326 
setp genserkins.ALPHA-2 0 
setp genserkins.ALPHA-3 1.570796326 
setp genserkins.ALPHA-4 -1.570796326 
setp genserkins.ALPHA-5 1.570796326

setp genserkins.D-0 169.77
setp genserkins.D-1 0
setp genserkins.D-2 -6.25
setp genserkins.D-3 223.63
setp genserkins.D-4 0 
setp genserkins.D-5 36.5

addf [HOSTMOT2](BOARD).0.read     servo-thread
addf [HOSTMOT2](BOARD).0.write    servo-thread
addf motion-command-handler       servo-thread
addf motion-controller            servo-thread
addf pid.x.do-pid-calcs           servo-thread
addf pid.y.do-pid-calcs           servo-thread
addf pid.z.do-pid-calcs           servo-thread
addf pid.a.do-pid-calcs           servo-thread
addf pid.b.do-pid-calcs           servo-thread
addf pid.c.do-pid-calcs           servo-thread

# --- HOMING ---
net home-x <= sx1509b.0.gpio-00
net home-y <= sx1509b.0.gpio-03
net home-z <= sx1509b.0.gpio-02
net home-a <= sx1509b.0.gpio-01
net home-b <= sx1509b.0.gpio-13
net home-c <= sx1509b.0.gpio-14

# --- MOTOR EN ---
setp [HOSTMOT2](BOARD).0.gpio.022.is_output TRUE
setp [HOSTMOT2](BOARD).0.gpio.022.invert_output TRUE
net machine-is-enabled => [HOSTMOT2](BOARD).0.gpio.022.out

setp   pid.x.Pgain     [JOINT_0]P
setp   pid.x.Igain     [JOINT_0]I
setp   pid.x.Dgain     [JOINT_0]D
setp   pid.x.bias      [JOINT_0]BIAS
setp   pid.x.FF0       [JOINT_0]FF0
setp   pid.x.FF1       [JOINT_0]FF1
setp   pid.x.FF2       [JOINT_0]FF2
setp   pid.x.deadband  [JOINT_0]DEADBAND
setp   pid.x.maxoutput [JOINT_0]MAX_OUTPUT
setp   pid.x.error-previous-target true
setp   pid.x.maxerror .0005

net x-index-enable  <=> pid.x.index-enable
net x-enable        =>  pid.x.enable
net x-output        =>  pid.x.output
net x-pos-cmd       =>  pid.x.command
net x-vel-cmd       =>  pid.x.command-deriv
net x-pos-fb        =>  pid.x.feedback

# Step Gen signals/setup

setp   [HOSTMOT2](BOARD).0.stepgen.00.dirsetup        [JOINT_0]DIRSETUP
setp   [HOSTMOT2](BOARD).0.stepgen.00.dirhold         [JOINT_0]DIRHOLD
setp   [HOSTMOT2](BOARD).0.stepgen.00.steplen         [JOINT_0]STEPLEN
setp   [HOSTMOT2](BOARD).0.stepgen.00.stepspace       [JOINT_0]STEPSPACE
setp   [HOSTMOT2](BOARD).0.stepgen.00.position-scale  [JOINT_0]STEP_SCALE
setp   [HOSTMOT2](BOARD).0.stepgen.00.step_type       0
setp   [HOSTMOT2](BOARD).0.stepgen.00.control-type    1
setp   [HOSTMOT2](BOARD).0.stepgen.00.maxaccel        [JOINT_0]STEPGEN_MAXACCEL
setp   [HOSTMOT2](BOARD).0.stepgen.00.maxvel          [JOINT_0]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net x-pos-cmd    <= joint.0.motor-pos-cmd
net x-vel-cmd    <= joint.0.vel-cmd
net x-output     <= [HOSTMOT2](BOARD).0.stepgen.00.velocity-cmd
net x-pos-fb     <= [HOSTMOT2](BOARD).0.stepgen.00.position-fb
net x-pos-fb     => joint.0.motor-pos-fb
net x-enable     <= joint.0.amp-enable-out
net x-enable     => [HOSTMOT2](BOARD).0.stepgen.00.enable

# ---setup home / limit switch signals---

net home-x     =>  joint.0.home-sw-in
net x-neg-limit     =>  joint.0.neg-lim-sw-in
net x-pos-limit     =>  joint.0.pos-lim-sw-in

setp   pid.y.Pgain     [JOINT_1]P
setp   pid.y.Igain     [JOINT_1]I
setp   pid.y.Dgain     [JOINT_1]D
setp   pid.y.bias      [JOINT_1]BIAS
setp   pid.y.FF0       [JOINT_1]FF0
setp   pid.y.FF1       [JOINT_1]FF1
setp   pid.y.FF2       [JOINT_1]FF2
setp   pid.y.deadband  [JOINT_1]DEADBAND
setp   pid.y.maxoutput [JOINT_1]MAX_OUTPUT
setp   pid.y.error-previous-target true
setp   pid.y.maxerror .0005

net y-index-enable  <=> pid.y.index-enable
net y-enable        =>  pid.y.enable
net y-output        =>  pid.y.output
net y-pos-cmd       =>  pid.y.command
net y-vel-cmd       =>  pid.y.command-deriv
net y-pos-fb        =>  pid.y.feedback

# Step Gen signals/setup

setp   [HOSTMOT2](BOARD).0.stepgen.01.dirsetup        [JOINT_1]DIRSETUP
setp   [HOSTMOT2](BOARD).0.stepgen.01.dirhold         [JOINT_1]DIRHOLD
setp   [HOSTMOT2](BOARD).0.stepgen.01.steplen         [JOINT_1]STEPLEN
setp   [HOSTMOT2](BOARD).0.stepgen.01.stepspace       [JOINT_1]STEPSPACE
setp   [HOSTMOT2](BOARD).0.stepgen.01.position-scale  [JOINT_1]STEP_SCALE
setp   [HOSTMOT2](BOARD).0.stepgen.01.step_type       0
setp   [HOSTMOT2](BOARD).0.stepgen.01.control-type    1
setp   [HOSTMOT2](BOARD).0.stepgen.01.maxaccel        [JOINT_1]STEPGEN_MAXACCEL
setp   [HOSTMOT2](BOARD).0.stepgen.01.maxvel          [JOINT_1]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net y-pos-cmd    <= joint.1.motor-pos-cmd
net y-vel-cmd    <= joint.1.vel-cmd
net y-output     <= [HOSTMOT2](BOARD).0.stepgen.01.velocity-cmd
net y-pos-fb     <= [HOSTMOT2](BOARD).0.stepgen.01.position-fb
net y-pos-fb     => joint.1.motor-pos-fb
net y-enable     <= joint.1.amp-enable-out
net y-enable     => [HOSTMOT2](BOARD).0.stepgen.01.enable

# ---setup home / limit switch signals---

net home-y     =>  joint.1.home-sw-in
net y-neg-limit     =>  joint.1.neg-lim-sw-in
net y-pos-limit     =>  joint.1.pos-lim-sw-in

setp   pid.z.Pgain     [JOINT_2]P
setp   pid.z.Igain     [JOINT_2]I
setp   pid.z.Dgain     [JOINT_2]D
setp   pid.z.bias      [JOINT_2]BIAS
setp   pid.z.FF0       [JOINT_2]FF0
setp   pid.z.FF1       [JOINT_2]FF1
setp   pid.z.FF2       [JOINT_2]FF2
setp   pid.z.deadband  [JOINT_2]DEADBAND
setp   pid.z.maxoutput [JOINT_2]MAX_OUTPUT
setp   pid.z.error-previous-target true
setp   pid.z.maxerror .0005

net z-index-enable  <=> pid.z.index-enable
net z-enable        =>  pid.z.enable
net z-output        =>  pid.z.output
net z-pos-cmd       =>  pid.z.command
net z-vel-cmd       =>  pid.z.command-deriv
net z-pos-fb        =>  pid.z.feedback

# Step Gen signals/setup

setp   [HOSTMOT2](BOARD).0.stepgen.02.dirsetup        [JOINT_2]DIRSETUP
setp   [HOSTMOT2](BOARD).0.stepgen.02.dirhold         [JOINT_2]DIRHOLD
setp   [HOSTMOT2](BOARD).0.stepgen.02.steplen         [JOINT_2]STEPLEN
setp   [HOSTMOT2](BOARD).0.stepgen.02.stepspace       [JOINT_2]STEPSPACE
setp   [HOSTMOT2](BOARD).0.stepgen.02.position-scale  [JOINT_2]STEP_SCALE
setp   [HOSTMOT2](BOARD).0.stepgen.02.step_type       0
setp   [HOSTMOT2](BOARD).0.stepgen.02.control-type    1
setp   [HOSTMOT2](BOARD).0.stepgen.02.maxaccel        [JOINT_2]STEPGEN_MAXACCEL
setp   [HOSTMOT2](BOARD).0.stepgen.02.maxvel          [JOINT_2]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net z-pos-cmd    <= joint.2.motor-pos-cmd
net z-vel-cmd    <= joint.2.vel-cmd
net z-output     <= [HOSTMOT2](BOARD).0.stepgen.02.velocity-cmd
net z-pos-fb     <= [HOSTMOT2](BOARD).0.stepgen.02.position-fb
net z-pos-fb     => joint.2.motor-pos-fb
net z-enable     <= joint.2.amp-enable-out
net z-enable     => [HOSTMOT2](BOARD).0.stepgen.02.enable

# ---setup home / limit switch signals---

net home-z     =>  joint.2.home-sw-in
net z-neg-limit     =>  joint.2.neg-lim-sw-in
net z-pos-limit     =>  joint.2.pos-lim-sw-in

setp   pid.a.Pgain     [JOINT_3]P
setp   pid.a.Igain     [JOINT_3]I
setp   pid.a.Dgain     [JOINT_3]D
setp   pid.a.bias      [JOINT_3]BIAS
setp   pid.a.FF0       [JOINT_3]FF0
setp   pid.a.FF1       [JOINT_3]FF1
setp   pid.a.FF2       [JOINT_3]FF2
setp   pid.a.deadband  [JOINT_3]DEADBAND
setp   pid.a.maxoutput [JOINT_3]MAX_OUTPUT
setp   pid.a.error-previous-target true
setp   pid.a.maxerror .0005

net a-index-enable  <=> pid.a.index-enable
net a-enable        =>  pid.a.enable
net a-output        =>  pid.a.output
net a-pos-cmd       =>  pid.a.command
net a-vel-cmd       =>  pid.a.command-deriv
net a-pos-fb        =>  pid.a.feedback

# Step Gen signals/setup

setp   hm2_alch_au.0.encoder.00.scale 250
setp   [HOSTMOT2](BOARD).0.stepgen.03.dirsetup        [JOINT_3]DIRSETUP
setp   [HOSTMOT2](BOARD).0.stepgen.03.dirhold         [JOINT_3]DIRHOLD
setp   [HOSTMOT2](BOARD).0.stepgen.03.steplen         [JOINT_3]STEPLEN
setp   [HOSTMOT2](BOARD).0.stepgen.03.stepspace       [JOINT_3]STEPSPACE
setp   [HOSTMOT2](BOARD).0.stepgen.03.position-scale  [JOINT_3]STEP_SCALE
setp   [HOSTMOT2](BOARD).0.stepgen.03.step_type       0
setp   [HOSTMOT2](BOARD).0.stepgen.03.control-type    1
setp   [HOSTMOT2](BOARD).0.stepgen.03.maxaccel        [JOINT_3]STEPGEN_MAXACCEL
setp   [HOSTMOT2](BOARD).0.stepgen.03.maxvel          [JOINT_3]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net a-pos-cmd    <= joint.3.motor-pos-cmd
net a-vel-cmd    <= joint.3.vel-cmd
net a-output     <= [HOSTMOT2](BOARD).0.stepgen.03.velocity-cmd
#net a-pos-fb     <= [HOSTMOT2](BOARD).0.encoder.00.position
net a-pos-fb     <= [HOSTMOT2](BOARD).0.stepgen.03.position-fb
net a-pos-fb     => joint.3.motor-pos-fb
net a-enable     <= joint.3.amp-enable-out
net a-enable     => [HOSTMOT2](BOARD).0.stepgen.03.enable

setp   pid.b.Pgain     [JOINT_4]P
setp   pid.b.Igain     [JOINT_4]I
setp   pid.b.Dgain     [JOINT_4]D
setp   pid.b.bias      [JOINT_4]BIAS
setp   pid.b.FF0       [JOINT_4]FF0
setp   pid.b.FF1       [JOINT_4]FF1
setp   pid.b.FF2       [JOINT_4]FF2
setp   pid.b.deadband  [JOINT_4]DEADBAND
setp   pid.b.maxoutput [JOINT_4]MAX_OUTPUT
setp   pid.b.error-previous-target true
setp   pid.b.maxerror .0005

net b-index-enable  <=> pid.b.index-enable
net b-enable        =>  pid.b.enable
net b-output        =>  pid.b.output
net b-pos-cmd       =>  pid.b.command
net b-vel-cmd       =>  pid.b.command-deriv
net b-pos-fb        =>  pid.b.feedback

# Step Gen signals/setup

setp   [HOSTMOT2](BOARD).0.stepgen.04.dirsetup        [JOINT_4]DIRSETUP
setp   [HOSTMOT2](BOARD).0.stepgen.04.dirhold         [JOINT_4]DIRHOLD
setp   [HOSTMOT2](BOARD).0.stepgen.04.steplen         [JOINT_4]STEPLEN
setp   [HOSTMOT2](BOARD).0.stepgen.04.stepspace       [JOINT_4]STEPSPACE
setp   [HOSTMOT2](BOARD).0.stepgen.04.position-scale  [JOINT_4]STEP_SCALE
setp   [HOSTMOT2](BOARD).0.stepgen.04.step_type       0
setp   [HOSTMOT2](BOARD).0.stepgen.04.control-type    1
setp   [HOSTMOT2](BOARD).0.stepgen.04.maxaccel        [JOINT_4]STEPGEN_MAXACCEL
setp   [HOSTMOT2](BOARD).0.stepgen.04.maxvel          [JOINT_4]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net b-pos-cmd    <= joint.4.motor-pos-cmd
net b-vel-cmd    <= joint.4.vel-cmd
net b-output     <= [HOSTMOT2](BOARD).0.stepgen.04.velocity-cmd
net b-pos-fb     <= [HOSTMOT2](BOARD).0.stepgen.04.position-fb
net b-pos-fb     => joint.4.motor-pos-fb
net b-enable     <= joint.4.amp-enable-out
net b-enable     => [HOSTMOT2](BOARD).0.stepgen.04.enable

setp   pid.c.Pgain     [JOINT_5]P
setp   pid.c.Igain     [JOINT_5]I
setp   pid.c.Dgain     [JOINT_5]D
setp   pid.c.bias      [JOINT_5]BIAS
setp   pid.c.FF0       [JOINT_5]FF0
setp   pid.c.FF1       [JOINT_5]FF1
setp   pid.c.FF2       [JOINT_5]FF2
setp   pid.c.deadband  [JOINT_5]DEADBAND
setp   pid.c.maxoutput [JOINT_5]MAX_OUTPUT
setp   pid.c.error-previous-target true
setp   pid.c.maxerror .0005

net c-index-enable  <=> pid.c.index-enable
net c-enable        =>  pid.c.enable
net c-output        =>  pid.c.output
net c-pos-cmd       =>  pid.c.command
net c-vel-cmd       =>  pid.c.command-deriv
net c-pos-fb        =>  pid.c.feedback

# Step Gen signals/setup

setp   [HOSTMOT2](BOARD).0.stepgen.05.dirsetup        [JOINT_5]DIRSETUP
setp   [HOSTMOT2](BOARD).0.stepgen.05.dirhold         [JOINT_5]DIRHOLD
setp   [HOSTMOT2](BOARD).0.stepgen.05.steplen         [JOINT_5]STEPLEN
setp   [HOSTMOT2](BOARD).0.stepgen.05.stepspace       [JOINT_5]STEPSPACE
setp   [HOSTMOT2](BOARD).0.stepgen.05.position-scale  [JOINT_5]STEP_SCALE
setp   [HOSTMOT2](BOARD).0.stepgen.05.step_type       0
setp   [HOSTMOT2](BOARD).0.stepgen.05.control-type    1
setp   [HOSTMOT2](BOARD).0.stepgen.05.maxaccel        [JOINT_5]STEPGEN_MAXACCEL
setp   [HOSTMOT2](BOARD).0.stepgen.05.maxvel          [JOINT_5]STEPGEN_MAXVEL

# ---closedloop stepper signals---

net c-pos-cmd    <= joint.5.motor-pos-cmd
net c-vel-cmd    <= joint.5.vel-cmd
net c-output     <= [HOSTMOT2](BOARD).0.stepgen.05.velocity-cmd
net c-pos-fb     <= [HOSTMOT2](BOARD).0.stepgen.05.position-fb
net c-pos-fb     => joint.5.motor-pos-fb
net c-enable     <= joint.5.amp-enable-out
net c-enable     => [HOSTMOT2](BOARD).0.stepgen.05.enable

#******************************
# connect miscellaneous signals
#******************************

#  ---HALUI signals---

net joint-select-a        halui.axis.x.select
net x-is-homed            halui.joint.0.is-homed
net jog-x-pos             halui.axis.x.plus
net jog-x-neg             halui.axis.x.minus
net jog-x-analog          halui.axis.x.analog
net joint-select-b        halui.axis.y.select
net y-is-homed            halui.joint.1.is-homed
net jog-y-pos             halui.axis.y.plus
net jog-y-neg             halui.axis.y.minus
net jog-y-analog          halui.axis.y.analog
net joint-select-c        halui.axis.z.select
net z-is-homed            halui.joint.2.is-homed
net jog-z-pos             halui.axis.z.plus
net jog-z-neg             halui.axis.z.minus
net jog-z-analog          halui.axis.z.analog
net jog-selected-pos      halui.axis.selected.plus
net jog-selected-neg      halui.axis.selected.minus
net machine-is-on         halui.machine.is-on
net jog-speed             halui.axis.jog-speed 
net MDI-mode              halui.mode.is-mdi

#  ---coolant signals---

net coolant-mist      <=  iocontrol.0.coolant-mist
net coolant-flood     <=  iocontrol.0.coolant-flood

#  ---probe signal---

net probe-in     =>  motion.probe-input

#  ---motion control signals---

net in-position               <=  motion.in-position
net machine-is-enabled        <=  motion.motion-enabled

#  ---digital in / out signals---

#  ---estop signals---

net estop-out     <=  iocontrol.0.user-enable-out
net estop-out     =>  iocontrol.0.emc-enable-in

# tool changer loopbacks
net tool-prep-loop iocontrol.0.tool-prepare => iocontrol.0.tool-prepared
net tool-change-loop iocontrol.0.tool-change => iocontrol.0.tool-changed
